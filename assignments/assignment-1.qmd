---
title: "Assignment 1"
---

My first assignment has two parts.

## (a) Summary of the Discussion Titled "Data Science and Industrial Engineering"

Hello Everyone,

I would like to share my inferences about the video that includes a detailed discussion about "Data Science and Industrial Engineering" between host: Erdi Dasdemir and Cem Vardar.

The talk begins with a discussion on the definition of Industrial Engineering and the potential roles that graduates can take on. It then explores the scope of data science and its relationship with industrial engineering. One of the most crucial connections is the ability of industrial engineers to leverage data science tools to enhance operational research (OR) and use optimization techniques more effectively.

Cem Vardar highlights various job opportunities where industrial engineers can apply data science tools, emphasizing that this field offers broad career prospects and a promising future. He also shares insights on how professionals can integrate data science methodologies into their work to improve decision-making and efficiency. Lastly, the talk provides practical advice on developing essential skills, understanding industry needs, and navigating career paths in both industrial engineering and data science.

## (b) Exploration of Statistical Summaries with Custom Functions and Iterations Methods

#### First we need to write our function

```{r}
library(dslabs)
data(mtcars)

compute_stats <- function(x) {
  stats <- list(
    mean = mean(x, na.rm = TRUE),
    median = median(x, na.rm = TRUE),
    variance = var(x, na.rm = TRUE),
    iqr = IQR(x, na.rm = TRUE),
    min = min(x, na.rm = TRUE),
    max = max(x, na.rm = TRUE)
  )
  return(stats)
}
```


#### Now we need to plug our coulmn values in to the function

```{r}
for (columns in colnames(mtcars)) {
  cat("\nStatistics for:", columns, "\n")
  print(compute_stats(mtcars[[columns]]))
}

library(dplyr)
```

#### We can make this loop with using sapply and apply

```{r}

stats_sapply <- sapply(mtcars, compute_stats)
print(stats_sapply)

stats_apply <- apply(mtcars, 2, compute_stats)
print(stats_apply)
```

## (c) "NA" example

#### Lets print the example first

```{r}
library(dslabs)
data("na_example")
print(na_example)
```

#### Total Count and Indexes of NA's
```{r}
# Number of NA's
num_na <- sum(is.na(na_example))
cat("Total NA values:", num_na, "\n")


# Indexes
na_positions <- which(is.na(na_example))
cat("NA positions:", na_positions, "\n")
```

#### Computation Mean and Std. Deviation by Ignoring NA's

```{r}
mean_value <- mean(na_example, na.rm = TRUE)
sd_value <- sd(na_example, na.rm = TRUE)

cat("Mean (ignoring NA):", mean_value, "\n")
cat("Standard Deviation (ignoring NA):", sd_value, "\n")

```


#### Handling Missing Values

```{r}

# Version 1: Replace NA values with the median of non-missing values
median_value <- median(na_example, na.rm = TRUE)
na_example_v1 <- na_example
na_example_v1[is.na(na_example_v1)] <- median_value

# Version 2: Replace NA values with a randomly selected non-missing value
non_na_values <- na_example[!is.na(na_example)]
na_example_v2 <- na_example
na_example_v2[is.na(na_example_v2)] <- sample(non_na_values, sum(is.na(na_example_v2)), replace = TRUE)

# Display modified datasets
cat("\nDataset with NA replaced by median:\n")
print(na_example_v1)

cat("\nDataset with NA replaced by random non-missing value:\n")
print(na_example_v2)

```


